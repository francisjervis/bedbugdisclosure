setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/bedbugdisclosure")
source("code/functions.R")
source("code/functions_extra.R")
# 1. Set baseline prevalence (p), renter selectivity (s), # of disclosed compartments (Dnum), and years of simulation
#p <- 0.05
p <- 0.01
s <- 0.5
nyears <- 20
Dnum <- 100
# 2. Set parameter values manually
SetParametersManual <- function(){
gamma <- 1/(6*30)
k <- 0.3
b <- 1.3
m <- 1/(2*365)
n <- 1/(3*30)
N <- 1000
D <- 365
return(c(gamma=gamma, k=k, b=b, m=m, n=n, N=N, D=D))
}
preparam <- SetParametersManual()
# 3. Solve for beta that will give the desired baseline prevalence
beta <- GetBeta(preparam, p)
# 4. Get initial conditions "at equilibrium"...
#...for base model
param <- c(preparam, beta, base.prev=p)
init <- GetInit(param)
y0 <- c(init, 0, 0, 0, 0)
names(y0)[5:8] <- c("Sv2","C_treat","C_turnover","C_vacancy")
#...for DDM
y0_DDM <- c(init, rep(0,Dnum), 0, 0,0)
names(y0_DDM)[5:(5+Dnum-1)] <- rep('Sv2',Dnum)
names(y0_DDM)[(5+Dnum):(5+Dnum+2)] <- c("C_treat","C_turnover","C_vacancy")
# 5. Format parameters and time to input into ode function
pp <- list(beta = beta, gamma = preparam[1], k = preparam[2], b = preparam[3],
m = preparam[4], n = preparam[5], N = preparam[6], D = preparam[7],
d = s)
pp_DDM <- list(beta = beta, gamma = preparam[1], k = preparam[2], b = preparam[3],
m = preparam[4], n = preparam[5], N = preparam[6], D = preparam[7],
d = s, Dnum=Dnum)
t <- seq(from=0, to=365*nyears+1, by=1)
# 6. Run the ode solver function for base and DDM models
out <- ode(y=y0, times = t, func=SetODEs, parms=pp)
library(deSolve)
# 6. Run the ode solver function for base and DDM models
out <- ode(y=y0, times = t, func=SetODEs, parms=pp)
outDDM <- ode(y=y0_DDM, times = t, func=SetODEsDDM, parms=pp_DDM)
# Proportion infested and vacant according to base model
Iprop <- (out[,3] + out[,5]) / pp$N
Vprop <- (out[,4] + out[,5] + out[,6]) / pp$N
# Proportion of infested and vacant according to DDM
Sv2tot_DDM <- rowSums(outDDM[, 6 : (6 + Dnum - 1)])
Iprop_DDM <- (outDDM[,3] + outDDM[,5]) / pp_DDM$N
Vprop_DDM <- (outDDM[,4] + outDDM[,5] + Sv2tot_DDM) / pp_DDM$N
# Calculate the difference in percentages between the two models
I_diff <- (Iprop_DDM - Iprop)*100
V_diff <- (Vprop_DDM - Vprop)*100
ymin <- min(c(I_diff, V_diff))
ymax <- max(c(I_diff, V_diff))
#pdf("figures_supplement/Routput/sfig_ddm_props_prev5.pdf", width = 3.5, height = 4)
pdf("figures_supplement/Routput/sfig_ddm_props_prev1.pdf", width = 3.5, height = 4)
plot(t/365, I_diff, xlab = "Year", ylab = "Difference in %", type = "l",
col = "red", ylim = c(ymin, ymax), lwd = 2)
lines(t/365, V_diff, col = "blue", lty = 2, lwd = 2)
plot.new()
legend("right", legend=c("Infested","Vacant"), bty="n",
col=c("red","blue"), lty=c(1,2),lwd=c(2, 2), cex=0.8)
dev.off()
library(deSolve)
# Source the functions we will need for our analysis
source("code/functions.R")
source("code/functions_DDM.R")
# Set baseline prevalence (p), renter selectivity (s), and years of simulation
p <- 0.05
source("code/functions_extra.R")
# Set baseline prevalence (p), renter selectivity (s), and years of simulation
p <- 0.05
s <- 0.5
nyears <- 10
Dnum <- 100
# Set parameter values manually
SetParametersManual <- function(){
gamma <- 1/(6*30)
k <- 0.3
b <- 1.3
m <- 1/(2*365)
n <- 1/(3*30)
N <- 1000
D <- 365
return(c(gamma=gamma, k=k, b=b, m=m, n=n, N=N, D=D))
}
preparam <- SetParametersManual()
# Solve for beta that will give the desired baseline prevalence
beta <- GetBeta(preparam, p)
# Either solve for initial conditions "at equilibrium"...
param <- c(preparam, beta, base.prev=p)
init <- GetInit(param)
y0 <- c(init, 0, 0, 0, 0)
names(y0)[5:8] <- c("Sv2","C_treat","C_turnover","C_vacancy")
# Format parameters and time to input into ode function
pp <- list(beta = beta, gamma = preparam[1], k = preparam[2], b = preparam[3],
m = preparam[4], n = preparam[5], N = preparam[6], D = preparam[7],
d = s)
t <- seq(from=0, to=365*nyears+1, by=1)
# Run the ode solver function
out <- ode(y=y0, times = t, func=SetODEs, parms=pp)
# Re-run with Dnum>1
y0 <- c(init, rep(0,Dnum), 0, 0, 0)
names(y0)[5:(5+Dnum-1)] <- rep('Sv2',Dnum)
names(y0)[(5+Dnum):(5+Dnum+2)] <- c("C_treat","C_turnover","C_vacancy")
pp <- list(beta = beta, gamma = preparam[1], k = preparam[2], b = preparam[3],
m = preparam[4], n = preparam[5], N = preparam[6], D = preparam[7],
d = s, Dnum=Dnum)
outDDM <- ode(y=y0, times = t, func=SetODEsDDM, parms=pp)
if(Dnum>1){
Sv2tot <- rowSums(outDDM[,6:(6+Dnum-1)])
} else {
Sv2tot <- outDDM[,6]
}
prevI.0 <- 100*(out[,3]+out[,5])/pp$N
prevI.DDM <- 100*(outDDM[,3]+outDDM[,5])/pp$N
prevV.0 <- 100*(out[,4]+out[,5]+out[,6])/pp$N
prevV.DDM <- 100*(outDDM[,4]+outDDM[,5]+Sv2tot)/pp$N
diff.prev <- prevI.DDM-prevI.0 #in total prevalence
diff.vac <- prevV.DDM-prevV.0 #in % vacant
bbcosts <- SetCost()
ctrt <- bbcosts[1]
ctov <- bbcosts[2]
cvac <- bbcosts[3]
colf <- dim(out)[2]
colf.DDM <- dim(outDDM)[2]
diff.Ctrt <- ctrt*(outDDM[,colf.DDM-2]-out[,colf-2])/pp$N #in cost of treatment per unit
diff.Ctov <- ctov*(outDDM[,colf.DDM-1]-out[,colf-1])/pp$N #in cost of turnover per unit
diff.Cvac <- cvac*(outDDM[,colf.DDM]-out[,colf])/(pp$N*30) #in cost of vacancy per unit
diff.Call <- diff.Ctrt+diff.Ctov+diff.Cvac  #total cost
#plot cost difference
plot(t/365, diff.Ctrt, type="l", col="#1f78b4", lty=1, lwd=1, ylim=c(-5,40),
ylab="Difference in cumulative cost ($)", xlab="Year")
lines(t/365, diff.Ctov, col="#b2df8a", lty=1, lwd=1)
lines(t/365, diff.Cvac, col="#a6cee3", lty=1, lwd=1)
lines(t/365, diff.Call, col="black", lty=1, lwd=3)
legend("right", legend=c("Treatment","Turnover","Vacancy","Total"), bty="n",
col=c("#1f78b4", "#b2df8a", "#a6cee3","black"),lwd=c(1,1,1,3), cex=0.8)
plot(t/365, diff.prev, type="l", col="red", lty=1, lwd=3, ylim=c(-0.02,0.08),
ylab="Difference in %", xlab="Year")
lines(t/365, diff.vac, col="blue", lty=3, lwd=3)
legend("topright", legend=c("Infested","Vacant"), bty="n",
col=c("red","blue"), lty=c(1,3),lwd=c(3,3), cex=0.8)
#plot cost difference
plot(t/365, diff.Ctrt, type="l", col="#1f78b4", lty=1, lwd=1, ylim=c(-5,50),
ylab="Difference in cumulative cost ($)", xlab="Year")
lines(t/365, diff.Ctov, col="#b2df8a", lty=1, lwd=1)
lines(t/365, diff.Cvac, col="#a6cee3", lty=1, lwd=1)
lines(t/365, diff.Call, col="black", lty=1, lwd=3)
library(deSolve)
library(reshape2)
library(ggplot2)
library(dplyr)
# Source the functions we will need for our analyses.
source("code/functions.R")
# Set baseline prevalence (p) and renter selectivity (s).
p <- 0.05
s <- 0.5
# Set parameter values and bed bug-related costs.
preparam <- SetParameters()
bbcosts <- SetCost()
# Solve for beta to get the desired baseline prevalence in the absence of
# disclosure. Append beta and p to our vector of parameter values.
beta <- GetBeta(preparam, p)
param <- c(preparam, beta, base.prev = p)
# Get initial conditions (Sr0, Ir0, etc.) and append these and d to our vector
# of parameter values.
init <- GetInit(param)
param.init <- c(param, init, d = s)
# Set the years over which to run the simulation and get the cost of disclosure.
years <- 1:20
# Run the GetCost function which outputs a data frame of total and component
# costs, along with prevalence over the years of the disclosure simulation.
cost.df <- GetCost(param.init, bbcosts, years)
dcost <- cost.df %>%
select(Year, Total_Cost) %>%
mutate(Total_Cost_2 = Total_Cost*(1/1.02^Year),  # 5% discount rate
Total_Cost_4 = Total_Cost*(1/1.04^Year),  # 10% discount rate
Total_Cost_6 = Total_Cost*(1/1.06^Year), # 15% discount rate
Total_Cost_8 = Total_Cost*(1/1.08^Year), # 15% discount rate
Total_Cost_10 = Total_Cost*(1/1.1^Year), # 15% discount rate
Cum_Cost = cumsum(Total_Cost),        # Find cumulative costs
Cum_Cost_2 = cumsum(Total_Cost_2),
Cum_Cost_4 = cumsum(Total_Cost_4),
Cum_Cost_6 = cumsum(Total_Cost_6),
Cum_Cost_8 = cumsum(Total_Cost_8),
Cum_Cost_10 = cumsum(Total_Cost_10))
# Add Year 0
year0 <- data.frame(Year = 0, Total_Cost = 0, Total_Cost_2 = 0,
Total_Cost_4 = 0, Total_Cost_6 = 0, Total_Cost_8 = 0,
Total_Cost_10 = 0, Cum_Cost = 0, Cum_Cost_2 = 0,
Cum_Cost_4 = 0, Cum_Cost_6 = 0, Cum_Cost_8 = 0,
Cum_Cost_10 = 0)
dcost <- rbind(year0, dcost)
# Separate data frame into yearly costs and cumulative costs
yearly.nodiscount <- select(dcost, Year, Total_Cost)
cum.nodiscount <- select(dcost, Year, Cum_Cost)
yearly.cost.wide <- select(dcost, Year, Total_Cost_2, Total_Cost_4,
Total_Cost_6, Total_Cost_8, Total_Cost_10)
cum.cost.wide <- select(dcost, Year, Cum_Cost_2, Cum_Cost_4, Cum_Cost_6,
Cum_Cost_8, Cum_Cost_10)
# Transform into long data format.
yearly.cost <- melt(yearly.cost.wide, id.vars = "Year")
cum.cost <- melt(cum.cost.wide, id.vars = "Year")
# Plot yearly costs
ggplot() +
geom_line(data=yearly.cost, aes(x=Year, y=value, color=variable)) +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text = element_text(size=24),
legend.title = element_text(size=24)) +
theme_bw() +
geom_line(data=yearly.nodiscount, aes(x=Year, y=Total_Cost), linetype=2) +
scale_color_discrete(name="Discount rate") +
labs(x="Years since implementation of disclosure", y = "Cost ($)")
# Plot cumulative costs
ggplot() +
geom_line(data=cum.cost, aes(x=Year, y=value, color=variable)) +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text = element_text(size=24),
legend.title = element_text(size=24)) +
theme_bw() +
geom_line(data=cum.nodiscount, aes(x=Year, y=Cum_Cost), linetype=2) +
scale_color_discrete(name="Discount rate") +
labs(x="Years since implementation of disclosure", y = "Cumulative cost ($)")
library(ggplot2)
gt <- read.csv("data/bedbugs_googletrend.csv")
gt$x <- 1:dim(gt)[1]
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
scale_x_continuous(breaks=seq(1, dim(gt)[1], by=24),
labels=c(2004, 2006, 2008, 2010, 2012, 2014, 2016,
2018)) +
labs(x="Year", y = "Search frequency")
library(RColorBrewer)
library(oce)
library(lattice)
# Set the x- and y- axis breaks, i.e. baseline prevalence and disclosure index,
# respectively
bprev.vec <- seq(0.001, 0.1, length.out = 100)
d.vec <- seq(0.01, 1, length.out = 100)
# 1.1 Load costmatrix output ----
cm1  <- readRDS("output_costmatrix/costmat_yr1.rds")
cm2  <- readRDS("output_costmatrix/costmat_yr2.rds")
cm3  <- readRDS("output_costmatrix/costmat_yr3.rds")
cm4  <- readRDS("output_costmatrix/costmat_yr4.rds")
cm5  <- readRDS("output_costmatrix/costmat_yr5.rds")
cm20 <- readRDS("output_costmatrix/costmat_yr20.rds")
# 1.2 Solve for relative prevalence reduction
GetRPR <- function(mat){
fprev <- mat[,c("prevalence")]
bprev <- mat[,c("baseline.prevalence")]
rel.prev.red <- ((bprev - fprev)/bprev)*100
mat <- cbind(mat, rel.prev.red)
colnames(mat)[length(colnames(mat))] <- "rel.prev.red"
return(mat)
}
cm1  <- GetRPR(cm1)
cm2  <- GetRPR(cm2)
cm3  <- GetRPR(cm3)
cm4  <- GetRPR(cm4)
cm5  <- GetRPR(cm5)
cm20 <- GetRPR(cm20)
# 1.3 Extract relative prev reduction and format into matrix for plotting ----
#     Make a 100 x 100 matrix of prevalence where each cell is the cost for a
#     given baseline prevalence and disclosure index
#     Note: prevalence makes up the first column of the cm matrix
p1    <- cm1[,9]
prev1 <- matrix(p1, nrow=length(bprev.vec), ncol=length(d.vec))
p2    <- cm2[,9]
prev2 <- matrix(p2, nrow=length(bprev.vec), ncol=length(d.vec))
p3    <- cm3[,9]
prev3 <- matrix(p3, nrow=length(bprev.vec), ncol=length(d.vec))
p4    <- cm4[,9]
prev4 <- matrix(p4, nrow=length(bprev.vec), ncol=length(d.vec))
p5    <- cm5[,9]
prev5 <- matrix(p5, nrow=length(bprev.vec), ncol=length(d.vec))
p20    <- cm20[,9]
prev20 <- matrix(p20, nrow=length(bprev.vec), ncol=length(d.vec))
myPalette <- colorRampPalette(rev(brewer.pal(7, "YlOrRd")))
colors <- myPalette(100)
MapColors <- function(mat){
z <- mat
z.facet.center <- (z[-1, -1] + z[-1, -ncol(z)] + z[-nrow(z), -1] + z[-nrow(z), -ncol(z)])/4
colmap <- colormap(z = as.vector(z.facet.center),
breaks = seq(0, 100, length.out=101), col = colors)
colmat <- matrix(colmap$zcol, nrow = 99, ncol = 99)
return(colmat)
}
colmat1  <- MapColors(prev1)
colmat2  <- MapColors(prev2)
colmat3  <- MapColors(prev3)
colmat4  <- MapColors(prev4)
colmat5  <- MapColors(prev5)
colmat20 <- MapColors(prev20)
persp(bprev.vec, d.vec, prev1, phi=25, theta=-35,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n RPR (%)", border=NA, zlim=c(0,100),
main = "Prev. Reduction Year 1", col=colmat1)
persp(bprev.vec, d.vec, prev2, phi=25, theta=-35,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n RPR (%)", border=NA, zlim=c(0,100),
main = "Prev. Reduction Year 2", col=colmat2)
persp(bprev.vec, d.vec, prev3, phi=25, theta=-35,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n RPR (%)", border=NA, zlim=c(0,100),
main = "Prev. Reduction Year 3", col=colmat3)
persp(bprev.vec, d.vec, prev4, phi=25, theta=-35,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n RPR (%)", border=NA, zlim=c(0,100),
main = "Prev. Reduction Year 4", col=colmat4)
levelplot(prev2, row.values=bprev.vec, col.values=d.vec, aspect="fill",
col.regions=colors, at=seq(0, 100, length.out=101))
library(deSolve)
library(reshape2)
library(ggplot2)
# Source the functions we will need for our analyses.
source("code/functions.R")
source("code/functions_extra.R")
# Set baseline prevalence (p) and renter selectivity (s).
p <- 0.05
s <- 0.5
# Set parameter values and bed bug-related costs.
preparam <- SetParameters()
#bbcosts <- SetCost()
renter.costs <- c(ancillary.cost.per.trt = 800, # cost of replacing a low to mid range queen mattress
cost.per.move = 400, # lower range listed for 2 bedroom apt
# https://www.homeadvisor.com/cost/storage-and-organization/hire-a-moving-service/#movers
cost.per.month.infested = 200) # national hourly wage for all private employees was about $26 for 2017 (x8 for a full work day)
# Set parameter values and bed bug-related costs.
preparam <- SetParameters()
renter.costs <- c(ancillary.cost.per.trt = 800,
cost.per.move = 400,
cost.per.month.infested = 200)
# Solve for beta to get the desired baseline prevalence in the absence of
# disclosure. Append beta and p to our vector of parameter values.
beta <- GetBeta(preparam, p)
param <- c(preparam, beta, base.prev = p)
# Get initial conditions (Sr0, Ir0, etc.) and append these and d to our vector
# of parameter values.
init <- GetInit(param)
param.init <- c(param, init, d = s)
# Set the years over which to run the simulation and get the cost of disclosure.
years <- 1:20
# Run the GetCost function which outputs a data frame of total and component
# costs, along with prevalence over the years of the disclosure simulation.
cost.df <- GetCost_renters(param.init, renter.costs, years)
# Add Year 0
year0 <- data.frame(Year = 0, Total_Cost = 0, Treatment = 0, Moveout = 0,
Untreated_Infestation = 0, Prevalence = p)
cost.df <- rbind(year0, cost.df)
# Separate data frame into total cost, component cost, and prevalence.
# Component costs need to be transformed to long data format.
totalcost.df <- cost.df[,1:2]
prev.df <- cost.df[,c(1,6)]
componentcost.df <- melt(cost.df[,c(1,3,4,5)], id.vars= "Year", value.name = "cost")
# All costs are NEGATIVE (i.e. all savings), so we will transform costs to be
# expressed as savings by multipling values by -1
totalcost.df$Total_Savings <- totalcost.df$Total_Cost*-1
componentcost.df$savings <- componentcost.df$cost*-1
# Convert prevalence so it's expressed in percentages
prev.df$Prevalence <- prev.df$Prevalence*100
prev.df$Prevalence_Reduction <- 5 - prev.df$Prevalence
# The following chunk of code finds the best place to position the prevalence
# curve:
maxcc <- max(totalcost.df$Total_Savings)
mincc <- min(totalcost.df$Total_Savings)
maxprev <- max(prev.df$Prevalence_Reduction)
minprev <- min(prev.df$Prevalence_Reduction)
range.cost <- maxcc - mincc
range.prev <- maxprev - minprev
mid.cost <- (maxcc + mincc)/2
mid.prev <- (maxprev + minprev)/2
m_transform <- range.prev/range.cost
b_transform <- mid.prev - m_transform*mid.cost
ggplot() +
geom_bar(data=componentcost.df, stat = "identity",
aes(x=Year, y=savings, fill= variable)) +
scale_fill_manual(name="Savings component:", values=c("#1f78b4", "#b2df8a",
"#a6cee3")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(axis.title.x=element_text(vjust=-2), axis.ticks.x=element_blank()) +
theme(plot.margin = unit(c(.5,.5,.5,.5), "cm")) +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
labs(x="Years since implementation of disclosure", y = "Savings ($)") +
geom_line(data=totalcost.df,aes(x=Year, y=Total_Savings, color = "black"),
color="black", linetype=2, size=1.3) +
scale_y_continuous(breaks=seq(0, maxcc, by=20),
sec.axis = sec_axis(~.*m_transform + b_transform,
name = "Prevalence reduction (%)",
breaks = 0:3)) +
theme(axis.line.y.right = element_line(color = "firebrick3"),
axis.ticks.y.right = element_line(color = "firebrick3"),
axis.title.y.right = element_text(color = "firebrick3"),
axis.text.y.right = element_text(color = "firebrick3")) +
geom_line(data=prev.df,aes(x=Year, y=(Prevalence_Reduction-b_transform)/m_transform,
color = "firebrick1"), color="firebrick1", linetype=1, size=1.3)
library(deSolve)
library(reshape)
library(plyr)
library(dplyr)
library(ggplot2)
# Source the functions we will need for our analysis
source("code/functions.R")
source("code/functions_extra.R")
# Set the range of parameter values we will evaluate
invgamma.range.in.months <- seq(2,12,by=2)
invgamma.range <- invgamma.range.in.months*30
gamma.range <- 1/(invgamma.range)
k.range <- seq(0,1,by=0.2)
b.range <- seq(1,5,by=0.5)
D.range <- c(0.5, 2, 3, 4, 5, 100)*365
g.effect <- GetCostVaryinggamma(gamma.range)
# Match gamma to inverse gamma in months (i.e. avg months infested)
g.effect$length.infestation <- mapvalues(g.effect$gamma, from=gamma.range,
to=invgamma.range.in.months)
g.effect$length.infestation <- as.character(g.effect$length.infestation)
g.effect$length.infestation <- factor(g.effect$length.infestation,
levels=c("2", "4", "6", "8", "10", "12"))
# Separate the 1/gamma estiamte used in the primary analysis (i.e. 6 mo)
g.estimate <- filter(g.effect, length.infestation == 6)
g.effect <- filter(g.effect, length.infestation != 6)
g.estimate$length.infestation <- as.character(g.estimate$length.infestation)
# 1.1 Plot effect of uncertainty in avg length of infestation on total cost
pdf("figures_supplement/Routput/sensitivity_varyinggamma_cost.pdf", height=4, width=4.5)
ggplot() +
geom_line(data=g.effect, aes(x=Year, y=Total_Cost,
color=length.infestation)) +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text = element_text(size=24),
legend.title = element_text(size=24)) +
geom_line(data=g.estimate, aes(x=Year, y=Total_Cost), size=1.5, linetype=2) +
theme_bw() +
scale_color_discrete(name="Avg. length \n of infestation \n (months)") +
labs(x="Years Since Implementation of Disclosure", y = "Cost ($)")
dev.off()
ggplot() +
geom_line(data=g.effect, aes(x=Year, y=Total_Cost,
color=length.infestation)) +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text = element_text(size=24),
legend.title = element_text(size=24)) +
geom_line(data=g.estimate, aes(x=Year, y=Total_Cost), size=1.5, linetype=2) +
theme_bw() +
scale_color_discrete(name="Avg. length \n of infestation \n (months)") +
labs(x="Years Since Implementation of Disclosure", y = "Cost ($)")
ggplot() +
geom_line(data=g.effect, aes(x=Year, y=Prevalence*100,
color=length.infestation)) +
theme(axis.text=element_text(size=24),
axis.title=element_text(size=24),
legend.text = element_text(size=24),
legend.title = element_text(size=24)) +
geom_line(data=g.estimate, aes(x=Year, y=Prevalence*100), size=1.5,
linetype=2) +
theme_bw() +
scale_color_discrete(name="Avg. length \n of infestation \n (months)") +
labs(x="Years Since Implementation of Disclosure", y = "Prevalence (%)")
